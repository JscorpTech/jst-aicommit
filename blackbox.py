from typing import Union
import requests

class Blackbox:

    def __init__(self) -> None:
        self.url = "https://www.blackbox.ai/api/chat"

    def get_commit(self, text: Union[str]) -> Union[str]:
        response = ""
        for chunk in self.request(text):
            response += chunk
        return response
    
    def request(self, text):
        
        payload = {
            "messages": [
                {
                    "role": "user",
                    "content": text
                }
            ],
            "previewToken": None,
            "userId": None,
            "codeModelMode": True,
            "agentMode": {},
            "trendingAgentMode": {},
            "isMicMode": False,
            "userSystemPrompt": None,
            "maxTokens": 1024,
            "playgroundTopP": 0.9,
            "playgroundTemperature": 0.5,
            "isChromeExt": False,
            "githubToken": "",
            "clickedAnswer2": False,
            "clickedAnswer3": False,
            "clickedForceWebSearch": False,
            "visitFromDelta": False,
            "mobileClient": False,
            "userSelectedModel": None
        }
        headers = {
            "accept": "*/*",
            "accept-language": "uz,en-US;q=0.9,en;q=0.8,ru;q=0.7",
            "content-type": "application/json",
            "priority": "u=1, i"
        }

        response = requests.post(self.url, json=payload, headers=headers, stream=True)
        for chunk in response.iter_lines(decode_unicode=True):
            if "Generated by BLACKBOX.AI, try unlimited chat https://www.blackbox.ai" in chunk or len(str(chunk).strip()) == 0:
                continue
            yield chunk

    
obj = Blackbox()
print(obj.get_commit("salom"))